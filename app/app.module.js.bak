
angular.module('pandaApp', [
    'ngRoute',
    'pandaCanvas',
    'codeEditor',
]).
    factory('asmModule', function ($http) {
        var ldtext = document.getElementById("ldtext");
        ldtext.innerHTML = "Checking browser compatibility...";
        var Module = {
            preRun: [],
            postRun: [],
            print: (//function print_() { return function (text) {}}
                function () {
                    var element = document.getElementById('console');
                    if (element) {
                        element.innerhtml = '';
                    } // clear browser cache
                    return function (text) {
                        var element = document.getElementById('console');
                        if (element) {
                            if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');
                            element.innerHTML += '<samp>' + text + '\n</samp>';
                            element.scrollTop = element.scrollHeight; // focus on bottom
                        }
                    };
                }
            )(),
            printErr: (function printErr() {
                return function (text) {
                    var element = document.getElementById('console');
                    if (element) {
                        element.innerHTML = '';
                    } // clear browser cache
                    else {
                        console.log('Dropped engine error: ' + text);
                        return;
                    };
                    if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');

                    if (text[0] == ':' && text.indexOf('(warning): ') !== -1 || (text.indexOf("WARNING:") === 0)) {
                        element.innerHTML += '<samp class="warning">' + text + '\n</samp>';
                    } else if ((text[0] == ':' && text.indexOf('(error): ') !== -1) || (text.indexOf("ERROR:") === 0) || (text === 'Traceback (most recent call last):') || (text.indexOf('Error: ') > 1) || (text.indexOf('Exception: ') > 1) || (text.indexOf('  File "') === 0)) {
                        element.innerHTML += '<samp class="error">' + text + '\n</samp>';
                    } else {
                        element.innerHTML += '<samp>' + text + '\n</samp>';
                    }
                    element.scrollTop = element.scrollHeight; // focus on bottom
                };
            })(),
            canvas: (function canvas() {
                var canvas = document.getElementById('canvas');
                canvas.contentEditable = true;
                canvas.setAttribute("tabindex", "0");
                // Focus the canvas when the mouse enters it.
                canvas.addEventListener('mouseenter', function () { canvas.focus(); }, false);
                return canvas;
            })(),
            setStatus: function setStatus(text) {
                var newString;
                if (text.indexOf("Downloading data... (") === 0) {
                    newString = 'Downloading data...';
                    var parts = text.substring(21, text.length - 1).split('/');
                    var percentComplete = (parseInt(parts[0]) / parseInt(parts[1])) * 100
                    ldbar.style.width = percentComplete + '%';
                } else {
                    newString = text;
                }
                if (newString != ldtext.innerHTML) {
                    ldtext.innerHTML = newString;
                    _thisModule.print(newString);
                }
                if (text === 'Done!') {
                    ldtext.innerHTML = 'Click "Run Code" to begin.';
                    _thisModule.hasInitialized = true;
                    window.setTimeout(_thisModule.autoRun, 0);
                }
            },
            totalDependencies: 0,
            monitorRunDependencies: function monitorRunDependencies(left) {
                this.totalDependencies = Math.max(this.totalDependencies, left);
                var percentComplete = ((this.totalDependencies - left) / this.totalDependencies) * 100;
                ldbar.style.width = percentComplete + '%';
            },
        };// Module init
        Module.hasInitialized = false;
        window.Module = _thisModule = Module;


        // from canvas
        //this.word = 'Works';

        // The URL of the asm.js resource to load.
        var EMSCRIPTEN_ASM = 'panda-engine/panda-engine27.js';
        // The uncompressed size of that resource (in bytes).
        var ASM_SIZE = 25355747;

        var ldtext = document.getElementById("ldtext");
        var ldbar = document.getElementById("ldbar");
        var ld = document.getElementById("ld");
        var canvas = document.getElementById("canvas");

        // TODO: fix these references from here down (at least)
        //this.Module = _thisModule;
        _thisModule.autoRun = function autoRun() {
            document.getElementById("ld").style.display = "none";
            var canvas = document.getElementById("canvas");

            canvas.style.display = "block";
            _thisModule.initCanvas = canvas;

            var stopFunc = Module.cwrap('stopPythonCode', 'number');
            stopFunc();

            //document.getElementById("console").innerHTML = '';
            var runFunc = Module.cwrap('runPythonCode', 'number', ['string']);
            runFunc('from appmain import Game\napp = Game()\napp.run()');
        }// Module.autoRun

        var memoryInitializer = 'panda-engine/panda-engine27.js.mem';
        if (typeof _thisModule['locateFile'] === 'function') {
            memoryInitializer = _thisModule['locateFile'](memoryInitializer);
        } else if (_thisModule['memoryInitializerPrefixURL']) {
            memoryInitializer = _thisModule['memoryInitializerPrefixURL'] + memoryInitializer;
        }// if memory init block
        //var xhr = _thisModule['memoryInitializerRequest'] = new XMLHttpRequest();
        //xhr.open('GET', memoryInitializer, true);
        //xhr.responseType = 'arraybuffer';
        //xhr.send(null);
        Module.memoryInitializer = memoryInitializer;

        function updateProgress(evt) {
            var percentComplete = (evt.loaded / ASM_SIZE) * 100;
            ldbar.style.width = percentComplete + '%';
        }// updateProgress()

        //var _this = this;
        Module.sendreq = function sendreq() {
            ldtext.innerHTML = "Downloading application...";
            var req = new XMLHttpRequest();
            req.onprogress = updateProgress;
            req.open('GET', EMSCRIPTEN_ASM, true);
            req.onreadystatechange = function (aEvt) {
                if (req.readyState == 4) {
                    //_this.Module.setStatus("Loading...");
                    _thisModule.setStatus("Loading...");
                    setTimeout(function () {
                        var blob = new Blob([req.responseText], {
                            type: 'text/javascript'
                        });
                        var script = document.createElement("script");
                        script.type = "text/javascript";
                        script.async = true;
                        script.defer = true;
                        script.src = URL.createObjectURL(blob);
                        //script.text = req.responseText;
                        document.body.appendChild(script);

                    }, 0);
                }
            };
            req.send();


            //$http({
            //    method: 'GET',
            //    url: EMSCRIPTEN_ASM
            //}).then(function (response) {
            //    console.log('recieved: ' + EMSCRIPTEN_ASM);
            //    //if (req.readyState == 4) {
            //    //_this.Module.setStatus("Loading...");
            //    _thisModule.setStatus("Loading...");
            //    setTimeout(function () {
            //        var blob = new Blob([req.responseText], {
            //            type: 'text/javascript'
            //        });
            //        var script = document.createElement("script");
            //        script.type = "text/javascript";
            //        script.async = true;
            //        script.defer = true;
            //        script.src = URL.createObjectURL(blob);
            //        //script.text = req.responseText;
            //        document.body.appendChild(script);

            //    }, 0);
            //    //}
            //}, function (error) {
            //    console.log(EMSCRIPTEN_ASM + ' error: ' + error);
            //});
        }// sendreq()
        //window.onload = function () {
        //    //$scope.$on('$viewContentLoaded', function () {
        //    try {
        //        gl = canvas.getContext("experimental-webgl") || canvas.getContext("webgl");
        //    } catch (x) {
        //        gl = null;
        //    }
        //    if (gl) {
        //        ldbar.style.display = "block";
        //        sendreq();//_thisModule);
        //    } else {
        //        ldtext.innerHTML = "WebGL support is required by this application.";
        //    }
        //};// window.oneload
        window.onerror = function (event) {
            // TODO: do not warn on ok events like simulating an infinite loop or exitStatus
            ldtext.innerHTML = 'Exception thrown, see JavaScript console';
        }; // window.onerror
        return Module;
    });
